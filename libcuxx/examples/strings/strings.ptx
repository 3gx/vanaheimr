//
// Generated by LLVM NVPTX Back-End
//

.version 3.1
.target sm_20
.address_size 64

	// .globl	_Z6strlenPKc
.global .align 1 .b8 _str[8] = {115, 117, 99, 99, 101, 115, 115, 0};

.visible .func  (.param .b32 func_retval0) _Z6strlenPKc(
	.param .b64 _Z6strlenPKc_param_0
)
{
	.local .align 8 .b8 	__local_depot0[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<3>;
	.reg .s64 	%rl<9>;

	mov.u64 	%rl8, __local_depot0;
	cvta.local.u64 	%SP, %rl8;
	ld.param.u64 	%rl1, [_Z6strlenPKc_param_0];
	st.u64 	[%SP+0], %rl1;
	st.u64 	[%SP+8], %rl1;
BB0_1:
	ld.u64 	%rl2, [%SP+8];
	ld.s8 	%r1, [%rl2];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB0_4;
	bra.uni 	BB0_2;
BB0_2:
	ld.u64 	%rl6, [%SP+8];
	add.s64 	%rl7, %rl6, 1;
	st.u64 	[%SP+8], %rl7;
	bra.uni 	BB0_1;
BB0_4:
	ld.u64 	%rl3, [%SP+8];
	ld.u64 	%rl4, [%SP+0];
	sub.s64 	%rl5, %rl3, %rl4;
	cvt.u32.u64	%r2, %rl5;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

	// .globl	_Z5equalPKcS0_
.visible .func  (.param .b32 func_retval0) _Z5equalPKcS0_(
	.param .b64 _Z5equalPKcS0__param_0,
	.param .b64 _Z5equalPKcS0__param_1
)
{
	.local .align 8 .b8 	__local_depot1[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<4>;
	.reg .s16 	%rs<3>;
	.reg .s32 	%r<6>;
	.reg .s64 	%rl<12>;

	mov.u64 	%rl11, __local_depot1;
	cvta.local.u64 	%SP, %rl11;
	ld.param.u64 	%rl1, [_Z5equalPKcS0__param_0];
	ld.param.u64 	%rl2, [_Z5equalPKcS0__param_1];
	st.u64 	[%SP+8], %rl1;
	st.u64 	[%SP+16], %rl2;
BB1_1:
	ld.u64 	%rl3, [%SP+8];
	ld.s8 	%r1, [%rl3];
	ld.u64 	%rl4, [%SP+16];
	ld.s8 	%r2, [%rl4];
	setp.eq.s32	%p1, %r1, %r2;
	@%p1 bra 	BB1_3;
	bra.uni 	BB1_2;
BB1_2:
	mov.u16 	%rs2, 0;
	st.u8 	[%SP+0], %rs2;
	bra.uni 	BB1_7;
BB1_3:
	ld.u64 	%rl5, [%SP+8];
	ld.s8 	%r3, [%rl5];
	setp.eq.s32	%p2, %r3, 0;
	@%p2 bra 	BB1_5;
	bra.uni 	BB1_4;
BB1_4:
	ld.u64 	%rl6, [%SP+16];
	ld.s8 	%r4, [%rl6];
	setp.ne.s32	%p3, %r4, 0;
	@%p3 bra 	BB1_6;
	bra.uni 	BB1_5;
BB1_5:
	mov.u16 	%rs1, 1;
	st.u8 	[%SP+0], %rs1;
	bra.uni 	BB1_7;
BB1_6:
	ld.u64 	%rl7, [%SP+8];
	add.s64 	%rl8, %rl7, 1;
	st.u64 	[%SP+8], %rl8;
	ld.u64 	%rl9, [%SP+16];
	add.s64 	%rl10, %rl9, 1;
	st.u64 	[%SP+16], %rl10;
	bra.uni 	BB1_1;
BB1_7:
	ld.u8 	%r5, [%SP+0];
	st.param.b32	[func_retval0+0], %r5;
	ret;
}

	// .globl	main
.visible .func  (.param .b32 func_retval0) main(
	.param .b32 main_param_0,
	.param .b64 main_param_1
)
{
	.local .align 8 .b8 	__local_depot2[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .s32 	%r<9>;
	.reg .s64 	%rl<9>;

	mov.u64 	%rl8, __local_depot2;
	cvta.local.u64 	%SP, %rl8;
	ld.param.u32 	%r1, [main_param_0];
	ld.param.u64 	%rl2, [main_param_1];
	mov.u64 	%rl3, _str;
	cvta.global.u64 	%rl1, %rl3;
	mov.u32 	%r2, 0;
	st.u32 	[%SP+0], %r2;
	st.u32 	[%SP+4], %r1;
	st.u64 	[%SP+8], %rl2;
	ld.u32 	%r3, [%SP+4];
	setp.lt.s32	%p1, %r3, 2;
	@%p1 bra 	BB2_3;
	bra.uni 	BB2_1;
BB2_1:
	ld.u64 	%rl4, [%SP+8];
	ld.u64 	%rl5, [%rl4+8];
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rl5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rl1;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z5equalPKcS0_, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r4, [retval0+0];
	
	//{
	}// Callseq End 0
	and.b32  	%r5, %r4, 1;
	setp.eq.b32	%p2, %r5, 1;
	@!%p2 bra 	BB2_3;
	bra.uni 	BB2_2;
BB2_2:
	mov.u32 	%r7, 1;
	st.u32 	[%SP+0], %r7;
	bra.uni 	BB2_4;
BB2_3:
	ld.u64 	%rl6, [%SP+8];
	ld.u64 	%rl7, [%rl6];
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rl7;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z6strlenPKc, 
	(
	param0
	);
	ld.param.b32	%r6, [retval0+0];
	
	//{
	}// Callseq End 1
	st.u32 	[%SP+0], %r6;
BB2_4:
	ld.u32 	%r8, [%SP+0];
	st.param.b32	[func_retval0+0], %r8;
	ret;
}


.visible .entry _pre_main(.param .b64 _retval, .param .b64 _argv, .param .b32 _argc)
{
	.param .align 4 .b32 argc;
	.param .align 4 .b64 argv;
	.param .align 4 .b32 retval;

	.reg .s32 %r<3>;
	.reg .s64 %l<3>;

	ld.param.u32 %r1,[_argc];
	st.param.u32 [argc], %r1;
	ld.param.u64 %l2,[_argv];
	st.param.u64 [argv], %l2;
	call (retval), main, (argc, argv);
	ld.param.u32 %r2, [retval];
	ld.param.u64 %l1, [_retval]; 	
	st.global.u32 [%l1], %r2;

	ret;
}

