//
// Generated by LLVM NVPTX Back-End
//

.version 3.1
.target sm_20
.address_size 64

	// .globl	main
.func  (.param .b32 func_retval0) _Z6printfIJEEiPKcDpT_
(
	.param .b64 _Z6printfIJEEiPKcDpT__param_0
)
;
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 _str[11] = {72, 101, 108, 108, 111, 32, 71, 80, 85, 10, 0};

.visible .func  (.param .b32 func_retval0) main(
	.param .b32 main_param_0,
	.param .b64 main_param_1
)
{
	.reg .s32 	%r<3>;
	.reg .s64 	%rl<3>;

	mov.u64 	%rl1, _str;
	cvta.global.u64 	%rl2, %rl1;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rl2;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z6printfIJEEiPKcDpT_, 
	(
	param0
	);
	ld.param.b32	%r1, [retval0+0];
	
	//{
	}// Callseq End 0
	mov.u32 	%r2, 0;
	st.param.b32	[func_retval0+0], %r2;
	ret;
}

.func  (.param .b32 func_retval0) _Z6printfIJEEiPKcDpT_(
	.param .b64 _Z6printfIJEEiPKcDpT__param_0
)
{
	.local .align 1 .b8 	__local_depot1[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .s32 	%r<2>;
	.reg .s64 	%rl<4>;

	mov.u64 	%rl3, __local_depot1;
	cvta.local.u64 	%SP, %rl3;
	ld.param.u64 	%rl1, [_Z6printfIJEEiPKcDpT__param_0];
	add.u64 	%rl2, %SP, 0;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.b64	[param0+0], %rl1;
	.param .b64 param1;
	st.param.b64	[param1+0], %rl2;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32	%r1, [retval0+0];
	
	//{
	}// Callseq End 1
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.func  (.param .b32 func_retval0) _Z7getSizev(

)
{
	.reg .s32 	%r<2>;

	mov.u32 	%r1, 0;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.func _Z10fillBufferPci(
	.param .b64 _Z10fillBufferPci_param_0,
	.param .b32 _Z10fillBufferPci_param_1
)
{


	ret;
}


.visible .entry _pre_main(.param .b64 _retval, .param .b64 _argv, .param .b32 _argc)
{
	.param .align 4 .b32 argc;
	.param .align 4 .b64 argv;
	.param .align 4 .b32 retval;

	.reg .s32 %r<3>;
	.reg .s64 %l<3>;

	ld.param.u32 %r1,[_argc];
	st.param.u32 [argc], %r1;
	ld.param.u64 %l2,[_argv];
	st.param.u64 [argv], %l2;
	call (retval), main, (argc, argv);
	ld.param.u32 %r2, [retval];
	ld.param.u64 %l1, [_retval]; 	
	st.global.u32 [%l1], %r2;

	ret;
}


